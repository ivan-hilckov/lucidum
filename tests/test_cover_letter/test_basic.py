"""
Basic smoke tests for cover letter generation system.
"""

import pytest
import asyncio
from cover_letter import (
    CoverLetterGenerator,
    CoverLetterResult,
)


class TestSmoke:
    """Basic smoke tests to ensure system is working."""

    def test_imports(self):
        """Test that main components can be imported."""

        # All imports successful
        assert True

    def test_model_creation(self):
        """Test basic model creation."""
        from cover_letter.models import JobAnalysis, CoverLetterResult

        job_analysis = JobAnalysis(
            keywords=["Python"],
            company_name="TestCorp",
        )

        assert job_analysis.company_name == "TestCorp"
        assert job_analysis.keywords == ["Python"]

        cover_letter_result = CoverLetterResult(
            cover_letter="Test letter",
            quality_score=0.8,
            keywords_found=5,
            generation_time=1.0,
            metadata={"test": True},
        )

        assert cover_letter_result.quality_score == 0.8
        assert cover_letter_result.keywords_found == 5

    def test_generator_instantiation(self, mock_openai_client):
        """Test that generator can be created."""
        generator = CoverLetterGenerator(mock_openai_client)

        assert generator.client == mock_openai_client

    @pytest.mark.asyncio
    async def test_basic_generation_flow(self, mock_openai_client):
        """Test basic generation without errors."""
        # Mock responses for the two OpenAI calls needed
        from unittest.mock import Mock

        # Mock for keyword extraction
        response1 = Mock()
        response1.choices = [Mock()]
        response1.choices[0].message = Mock()
        response1.choices[0].message.content = "Python, Django, SQL"

        # Mock for cover letter generation
        response2 = Mock()
        response2.choices = [Mock()]
        response2.choices[0].message = Mock()
        response2.choices[0].message.content = """–£–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞!

–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –° –æ–ø—ã—Ç–æ–º Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —è –≥–æ—Ç–æ–≤ –≤–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–±—â–∏—Ö —Ü–µ–ª–µ–π –∫–æ–º–∞–Ω–¥—ã.

–í —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —è —Ä–∞–±–æ—Ç–∞—é —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º"""

        mock_openai_client.chat.completions.create.side_effect = [response1, response2]

        generator = CoverLetterGenerator(mock_openai_client)

        try:
            result = await generator.generate("# Test Resume", "Test job description")
            assert isinstance(result, CoverLetterResult)
        except Exception as e:
            # If generation fails, at least ensure it doesn't crash
            assert "error" in str(e).lower() or "fail" in str(e).lower()


if __name__ == "__main__":
    # Quick console test runner
    async def quick_test():
        """Run a quick smoke test."""
        print("üß™ Running basic smoke tests...")

        # Test imports
        try:
            print("‚úÖ Imports work")
        except Exception as e:
            print(f"‚ùå Import failed: {e}")
            return False

        print("üéâ Basic smoke tests passed!")
        return True

    asyncio.run(quick_test())
